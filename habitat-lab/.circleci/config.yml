version: 2
gpu: &gpu
  machine:
    image: ubuntu-1604-cuda-10.1:201909-23
  resource_class: gpu.small
  environment:
    FPS_THRESHOLD: 900

jobs:
  python_lint:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: setup
          command: |
              sudo pip install black flake8 flake8-builtins flake8-bugbear flake8-comprehensions flake8-return flake8-simplify "isort[pyproject]" numpy --progress-bar off
              sudo pip install -r requirements.txt --progress-bar off
      - run:
          name: run black
          command: |
              black --exclude '/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist)|examples/tutorials/(colabs|nb_python)' habitat/. habitat_baselines/. examples/. test/. setup.py --diff
              black --exclude '/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist)|examples/tutorials/(colabs|nb_python)' habitat/. habitat_baselines/. examples/. test/. setup.py --check
      - run:
          name: run isort
          command: |
              isort --version
              isort habitat/. habitat_baselines/. examples/. test/. setup.py --diff
              isort habitat/. habitat_baselines/. examples/. test/. setup.py --check-only
      - run:
          name: run flake8
          command: |
              flake8 --version
              flake8 habitat/. habitat_baselines/. examples/. tests/. setup.py
  pre-commit:
    docker:
      - image: circleci/python:3.6
    working_directory: ~/repo/

    steps:
      - checkout
      - run:
          name: Combine precommit config and python versions for caching
          command: |
            cat .pre-commit-config.yaml > pre-commit-deps.txt
            python -VV >> pre-commit-deps.txt
      - restore_cache:
          keys:
          - v1-precommit-deps-{{ checksum "pre-commit-deps.txt" }}

      - run:
          name: Install Dependencies
          command: |
            sudo pip install -U pip setuptools pre-commit
            # Install the hooks now so that they'll be cached
            pre-commit install-hooks

      - save_cache:
          paths:
            - ~/.cache/pre-commit
          key: v1-precommit-deps-{{ checksum "pre-commit-deps.txt" }}

      - run:
          name: Check Code Style using pre-commit
          command: |
            SKIP=clang-format,eslint pre-commit run --show-diff-on-failure --all-files
  install_and_test_ubuntu:
    <<: *gpu
    steps:
      - checkout:
          path: ./habitat-lab
      - run:
          name: Install cmake
          no_output_timeout: 5m
          command: |
              echo $(git ls-remote https://github.com/facebookresearch/habitat-sim.git HEAD | awk '{ print $1}') > ./hsim_sha
              wget https://github.com/Kitware/CMake/releases/download/v3.13.4/cmake-3.13.4-Linux-x86_64.sh
              sudo mkdir /opt/cmake
              sudo sh ./cmake-3.13.4-Linux-x86_64.sh --prefix=/opt/cmake --skip-license
              sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
      - run:
          name: Install dependencies
          no_output_timeout: 20m
          command: |
              sudo apt-get update || true
              sudo apt-get install -y --no-install-recommends \
                  build-essential \
                  git \
                  curl \
                  vim \
                  ca-certificates \
                  libbullet-dev \
                  libjpeg-dev \
                  libglm-dev \
                  libegl1-mesa-dev \
                  xorg-dev \
                  freeglut3-dev \
                  pkg-config \
                  wget \
                  zip \
                  libhdf5-dev \
                  unzip || true
              sudo apt install --allow-change-held-packages \
                  texlive-base \
                  texlive-latex-extra \
                  texlive-fonts-extra \
                  texlive-fonts-recommended
      - run:
          name: Check CUDA
          no_output_timeout: 20m
          background: true
          command: |
              # wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_8.0.44-1_amd64.deb
              # sudo dpkg -i cuda-repo-ubuntu1604_8.0.44-1_amd64.deb
              # sudo apt-get update || true
              # sudo apt-get --yes --force-yes install cuda
              # touch ./cuda_installed
              nvidia-smi
      # Restore Conda cache
      - restore_cache:
          keys:
            - conda-{{ checksum "habitat-lab/.circleci/config.yml" }}
      - run:
          name: Install conda and dependencies
          no_output_timeout: 20m
          command: |
              if [ ! -d ~/miniconda ]
              then
                curl -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
                chmod +x ~/miniconda.sh
                ~/miniconda.sh -b -p $HOME/miniconda
                rm ~/miniconda.sh
                export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
                conda create -y -n habitat python=3.6
                . activate habitat
                conda install -q -y -c conda-forge ninja ccache numpy pytest pytest-mock pytest-cov
                pip install pytest-sugar
              fi
      - run:
          name: Install pytorch
          no_output_timeout: 20m
          background: true
          command: |
              if [ ! -f ~/miniconda/pytorch_installed ]
              then
                export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
                . activate habitat;
                conda install -c  conda-forge opencv -y
                conda install -y pytorch torchvision cudatoolkit=10.0 -c pytorch
              fi
              touch ~/miniconda/pytorch_installed
      - restore_cache:
          keys:
            - habitat-sim-{{ checksum "./hsim_sha" }}
      - restore_cache:
          keys:
            - ccache-{{ arch }}-master
          paths:
            - /home/circleci/.ccache
      - run:
          name: CCache initialization
          command: |
            export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
            . activate habitat;
            ccache --show-stats
            ccache --zero-stats
            ccache --max-size=10.0G
      - run:
          name: Build, install habitat-sim and run benchmark
          no_output_timeout: 30m
          command: |
              if [ ! -d ./habitat-sim ]
              then
                git clone https://github.com/facebookresearch/habitat-sim.git --recursive
              fi
              # while [ ! -f ./cuda_installed ]; do sleep 2; done # wait for CUDA
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              pip install -r requirements.txt --progress-bar off
              pip install pillow
              python -u setup.py install --headless --with-cuda --bullet
      - run:
          name: Ccache stats
          when: always
          command: |
            export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
            . activate habitat;
            ccache --show-stats
      - run:
          name: Download test data
          command: |
              if [ ! -f ./habitat-sim/data/scene_datasets/habitat-test-scenes/van-gogh-room.glb ]
              then
                cd habitat-sim
                wget http://dl.fbaipublicfiles.com/habitat/habitat-test-scenes.zip
                unzip habitat-test-scenes.zip
                rm habitat-test-scenes.zip
              fi
      - run:
          name: Download coda scene
          command: |
            if [ ! -f ./habitat-sim/data/scene_datasets/coda/coda.glb ]
            then
              cd habitat-sim
              wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1Pc-J6pZzXEd8RSeLM94t3iwO8q_RQ853' -O coda.zip
              unzip coda.zip -d data/scene_datasets
              rm coda.zip
            fi
      - run:
          name: Run sim benchmark
          command: |
              # while [ ! -f ./cuda_installed ]; do sleep 2; done # wait for CUDA
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim
              python examples/example.py --scene data/scene_datasets/habitat-test-scenes/van-gogh-room.glb --silent --test_fps_regression $FPS_THRESHOLD
      - save_cache:
          key: habitat-sim-{{ checksum "./hsim_sha" }}
          background: true
          paths:
            - ./habitat-sim
      - save_cache:
          key: ccache-{{ arch }}-master
          background: true
          paths:
            - /home/circleci/.ccache
      - run:
          name: Install api
          no_output_timeout: 20m
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-lab
              while [ ! -f ~/miniconda/pytorch_installed ]; do sleep 2; done # wait for Pytorch
              ln -s ../habitat-sim/data data
              pip install -r requirements.txt --progress-bar off
              touch ~/miniconda/pip_deps_installed
      - save_cache:
          key: conda-{{ checksum "habitat-lab/.circleci/config.yml" }}
          background: true
          paths:
            - ~/miniconda
      - run:
          name: Run api tests
          no_output_timeout: 30m
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-lab
              python setup.py develop --all
              export PYTHONPATH=.:$PYTHONPATH
              python setup.py test --addopts "--cov-report=xml --cov=./"

              bash <(curl -s https://codecov.io/bash) -f coverage.xml
      - run:
          name: Build api documentation
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-lab
              python setup.py develop --all

              # Download sim inventory for crosslinking (no need to build
              # the whole sim docs for that)
              # TODO: take it from github.com/facebookmicrosites/habitat-website
              #   instead
              mkdir -p ../habitat-sim/build/docs-public/habitat-sim
              curl -s https://aihabitat.org/docs/habitat-sim/objects.inv > ../habitat-sim/build/docs-public/habitat-sim/objects.inv

              cd docs
              conda install -y -c conda-forge doxygen==1.8.16
              conda install -y  jinja2 pygments docutils
              mkdir -p ../build/docs
              ./build-public.sh


workflows:
  version: 2
  install_and_test:
    jobs:
      - pre-commit
      - python_lint
      - install_and_test_ubuntu
